{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = environment.serverBaseUrl;\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n  }\n  getDefaultHeaders() {\n    return {\n      headers: new HttpHeaders().set('default', 'default')\n    };\n  }\n  get(serviceEndpoint, id, options) {\n    this.apiUrl = `${baseUrl}`;\n    let url = `${this.apiUrl}${serviceEndpoint}`;\n    if (id) {\n      url += `/${id}`;\n    }\n    return this.http.get(url, options ? options : this.getDefaultHeaders());\n  }\n  post(serviceEndpoint, item, options) {\n    this.apiUrl = `${baseUrl}`;\n    const defaultOptions = this.getDefaultHeaders();\n    const formData = item instanceof FormData;\n    if (!formData) {\n      defaultOptions.headers = defaultOptions.headers.append('Content-Type', 'application/json');\n    }\n    return this.http.post(`${this.apiUrl}${serviceEndpoint}`, item instanceof FormData ? item : JSON.stringify(item), options ?? defaultOptions);\n  }\n  delete(serviceEndpoint, id, options) {\n    this.apiUrl = `${baseUrl}`;\n    const defaultOptions = this.getDefaultHeaders();\n    let endpoint = `${this.apiUrl}${serviceEndpoint}`; // apiUrl contains the slash\n    if (id) {\n      endpoint = `${endpoint}/${id}`;\n    }\n    return this.http.delete(endpoint, options ?? defaultOptions);\n  }\n  put(serviceEndpoint, item, id, options) {\n    this.apiUrl = `${baseUrl}`;\n    let url = `${this.apiUrl}${serviceEndpoint}`;\n    if (id) {\n      url += `/${id}`;\n    }\n    const defaultOptions = this.getDefaultHeaders();\n    defaultOptions.headers = defaultOptions.headers.append('Content-Type', 'application/json');\n    return this.http.put(`${url}`, JSON.stringify(item), options ?? defaultOptions);\n  }\n}\nClientService.ɵfac = function ClientService_Factory(t) {\n  return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n};\nClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientService,\n  factory: ClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAgCA,WAAW,QAAQ,sBAAsB;AAEzE,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,MAAMC,OAAO,GAAGD,WAAW,CAACE,aAAa;AAKzC,OAAM,MAAOC,aAAa;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAE/BC,iBAAiB;IACrB,OAAO;MAAEC,OAAO,EAAE,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,SAAS,EAAE,SAAS;IAAC,CAAE;EACnE;EAEAC,GAAG,CACCC,eAAuB,EACvBC,EAAuB,EACvBC,OAAiB;IAEjB,IAAI,CAACC,MAAM,GAAG,GAAGZ,OAAO,EAAE;IAE1B,IAAIa,GAAG,GAAG,GAAG,IAAI,CAACD,MAAM,GAAGH,eAAe,EAAE;IAC5C,IAAIC,EAAE,EAAE;MAAEG,GAAG,IAAI,IAAIH,EAAE,EAAE;;IAEzB,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAIK,GAAG,EAAEF,OAAO,GAAGA,OAAO,GAAE,IAAI,CAACN,iBAAiB,EAAE,CAAC;EAE7E;EAEAS,IAAI,CAAIL,eAAoB,EAAEM,IAAQ,EAAEJ,OAAa;IAEjD,IAAI,CAACC,MAAM,GAAG,GAAGZ,OAAO,EAAE;IAE1B,MAAMgB,cAAc,GAAG,IAAI,CAACX,iBAAiB,EAAE;IAC/C,MAAMY,QAAQ,GAAGF,IAAI,YAAYG,QAAQ;IAEzC,IAAI,CAACD,QAAQ,EAAE;MACXD,cAAc,CAACV,OAAO,GAAGU,cAAc,CAACV,OAAO,CAACa,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;;IAG9F,OAAO,IAAI,CAACf,IAAI,CAACU,IAAI,CACjB,GAAG,IAAI,CAACF,MAAM,GAAGH,eAAe,EAAE,EACjCM,IAAI,YAAYG,QAAQ,GAAIH,IAAI,GAAGK,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,EACxDJ,OAAO,IAAIK,cAAc,CAC5B;EACL;EAEAM,MAAM,CACJb,eAAuB,EACvBC,EAAkB,EAClBC,OAAa;IAEX,IAAI,CAACC,MAAM,GAAG,GAAGZ,OAAO,EAAE;IAC1B,MAAMgB,cAAc,GAAG,IAAI,CAACX,iBAAiB,EAAE;IAC/C,IAAIkB,QAAQ,GAAG,GAAG,IAAI,CAACX,MAAM,GAAGH,eAAe,EAAE,CAAC,CAAC;IAEnD,IAAIC,EAAE,EAAE;MAAEa,QAAQ,GAAG,GAAGA,QAAQ,IAAIb,EAAE,EAAE;;IAExC,OAAO,IAAI,CAACN,IAAI,CAACkB,MAAM,CAAIC,QAAQ,EAAEZ,OAAO,IAAIK,cAAc,CAAC;EACnE;EAEAQ,GAAG,CACDf,eAAoB,EACpBM,IAAQ,EACRL,EAAW,EACXC,OAAa;IAEX,IAAI,CAACC,MAAM,GAAG,GAAGZ,OAAO,EAAE;IAE1B,IAAIa,GAAG,GAAG,GAAG,IAAI,CAACD,MAAM,GAAGH,eAAe,EAAE;IAC5C,IAAIC,EAAE,EAAE;MAAEG,GAAG,IAAI,IAAIH,EAAE,EAAE;;IAEzB,MAAMM,cAAc,GAAG,IAAI,CAACX,iBAAiB,EAAE;IAC/CW,cAAc,CAACV,OAAO,GAAGU,cAAc,CAACV,OAAO,CAACa,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAE1F,OAAO,IAAI,CAACf,IAAI,CAACoB,GAAG,CAAC,GAAGX,GAAG,EAAE,EAAEO,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,EAAEJ,OAAO,IAAIK,cAAc,CAAC;EACnF;;AArESd,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAuB,SAAbvB,aAAa;EAAAwB,YAFZ;AAAM","names":["HttpHeaders","environment","baseUrl","serverBaseUrl","ClientService","constructor","http","getDefaultHeaders","headers","set","get","serviceEndpoint","id","options","apiUrl","url","post","item","defaultOptions","formData","FormData","append","JSON","stringify","delete","endpoint","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/abelmejia/projects/angular-app-shell/src/app/shared/services/client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Options } from '../interfaces/options.interface';\n\nconst baseUrl = environment.serverBaseUrl;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n    apiUrl!: string;\n    constructor(private http: HttpClient) {}\n\n    private getDefaultHeaders(): any {\n        return { headers: new HttpHeaders().set('default', 'default') };\n    }\n\n    get<T>(\n        serviceEndpoint: string,\n        id?: number | undefined,\n        options?: Options): Observable<HttpEvent<T>> {\n\n        this.apiUrl = `${baseUrl}`;\n\n        let url = `${this.apiUrl}${serviceEndpoint}`;\n        if (id) { url += `/${id}`; }\n\n        return this.http.get<T>(url, options ? options: this.getDefaultHeaders());\n\n    }\n\n    post<T>(serviceEndpoint: any, item?: T, options?: any): Observable<ArrayBuffer> {\n\n        this.apiUrl = `${baseUrl}`;\n\n        const defaultOptions = this.getDefaultHeaders();\n        const formData = item instanceof FormData;\n\n        if (!formData) {\n            defaultOptions.headers = defaultOptions.headers.append('Content-Type', 'application/json');\n        }\n\n        return this.http.post(\n            `${this.apiUrl}${serviceEndpoint}`,\n            (item instanceof FormData) ? item : JSON.stringify(item),\n            options ?? defaultOptions\n        );\n    }\n\n    delete<T>(\n      serviceEndpoint: string,\n      id?: number|string,\n      options?: any\n    ): Observable<HttpEvent<T>> {\n        this.apiUrl = `${baseUrl}`;\n        const defaultOptions = this.getDefaultHeaders();\n        let endpoint = `${this.apiUrl}${serviceEndpoint}`; // apiUrl contains the slash\n\n        if (id) { endpoint = `${endpoint}/${id}`; }\n\n        return this.http.delete<T>(endpoint, options ?? defaultOptions);\n    }\n\n    put<T>(\n      serviceEndpoint: any,\n      item?: T,\n      id?: number,\n      options?: any\n    ): Observable<ArrayBuffer> {\n        this.apiUrl = `${baseUrl}`;\n\n        let url = `${this.apiUrl}${serviceEndpoint}`;\n        if (id) { url += `/${id}`; }\n\n        const defaultOptions = this.getDefaultHeaders();\n        defaultOptions.headers = defaultOptions.headers.append('Content-Type', 'application/json');\n\n        return this.http.put(`${url}`, JSON.stringify(item), options ?? defaultOptions);\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}